{
"parallel loop 1":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"init_array",
"loop id":"1",
"loop line":"29",
"loop column":"7",
"pragma type":"parallel for",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":["c2"],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"        for (c2 = 0; c2 <= n + -1; c2++) {",
"          A[c1][c2] = (((double )c1) * (c2 + 2) + 2) / n;",
"          B[c1][c2] = (((double )c1) * (c2 + 3) + 3) / n;",
"        }",
"      }"]
},
"parallel loop 2":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"init_array",
"loop id":"2",
"loop line":"30",
"loop column":"9",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"          A[c1][c2] = (((double )c1) * (c2 + 2) + 2) / n;",
"          B[c1][c2] = (((double )c1) * (c2 + 3) + 3) / n;",
"        }"]
},
"parallel loop 3":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"print_array",
"loop id":"1",
"loop line":"45",
"loop column":"3",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["for (j = 0; j < n; j++) {",
"      fprintf(stderr,\"%0.2lf \",A[i][j]);",
"      if ((i * n + j) % 20 == 0) ",
"        fprintf(stderr,\"\\n\");",
"    }"]
},
"parallel loop 4":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"print_array",
"loop id":"2",
"loop line":"46",
"loop column":"5",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"      fprintf(stderr,\"%0.2lf \",A[i][j]);",
"      if ((i * n + j) % 20 == 0) ",
"        fprintf(stderr,\"\\n\");",
"    }"]
},
"parallel loop 5":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"kernel_jacobi_2d_imper",
"loop id":"1",
"loop line":"67",
"loop column":"5",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"      B[1][c2] = 0.2 * (A[1][c2] + A[1][c2 - 1] + A[1][1 + c2] + A[1 + 1][c2] + A[1 - 1][c2]);",
"    }"]
},
"parallel loop 6":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"kernel_jacobi_2d_imper",
"loop id":"2",
"loop line":"70",
"loop column":"5",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"      if (c0 <= 28) {",
"        if ((2 * c0 + 1) % 3 == 0) {",
"          for (c2 = ((2 * c0 + 1) * 3 < 0?-(-(2 * c0 + 1) / 3) : ((3 < 0?(-(2 * c0 + 1) + - 3 - 1) / - 3 : (2 * c0 + 1 + 3 - 1) / 3))); c2 <= (((2 * c0 + 1492) * 3 < 0?((3 < 0?-((-(2 * c0 + 1492) + 3 + 1) / 3) : -((-(2 * c0 + 1492) + 3 - 1) / 3))) : (2 * c0 + 1492) / 3)); c2++) {",
"            B[1][(-2 * c0 + 3 * c2 + 2) / 3] = 0.2 * (A[1][(-2 * c0 + 3 * c2 + 2) / 3] + A[1][(-2 * c0 + 3 * c2 + 2) / 3 - 1] + A[1][1 + (-2 * c0 + 3 * c2 + 2) / 3] + A[1 + 1][(-2 * c0 + 3 * c2 + 2) / 3] + A[1 - 1][(-2 * c0 + 3 * c2 + 2) / 3]);",
"          }",
"        }",
"      }",
"#pragma omp parallel for private(c2)",
"      for (c1 = ((((2 * c0 + 2) * 3 < 0?-(-(2 * c0 + 2) / 3) : ((3 < 0?(-(2 * c0 + 2) + - 3 - 1) / - 3 : (2 * c0 + 2 + 3 - 1) / 3)))) > c0 + -9?(((2 * c0 + 2) * 3 < 0?-(-(2 * c0 + 2) / 3) : ((3 < 0?(-(2 * c0 + 2) + - 3 - 1) / - 3 : (2 * c0 + 2 + 3 - 1) / 3)))) : c0 + -9); c1 <= (((((2 * c0 + 498) * 3 < 0?((3 < 0?-((-(2 * c0 + 498) + 3 + 1) / 3) : -((-(2 * c0 + 498) + 3 - 1) / 3))) : (2 * c0 + 498) / 3)) < c0?(((2 * c0 + 498) * 3 < 0?((3 < 0?-((-(2 * c0 + 498) + 3 + 1) / 3) : -((-(2 * c0 + 498) + 3 - 1) / 3))) : (2 * c0 + 498) / 3)) : c0)); c1++) {",
"        B[-2 * c0 + 3 * c1][1] = 0.2 * (A[-2 * c0 + 3 * c1][1] + A[-2 * c0 + 3 * c1][1 - 1] + A[-2 * c0 + 3 * c1][1 + 1] + A[1 + (-2 * c0 + 3 * c1)][1] + A[-2 * c0 + 3 * c1 - 1][1]);",
"        for (c2 = 2 * c0 + -2 * c1 + 2; c2 <= 2 * c0 + -2 * c1 + 498; c2++) {",
"          A[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1] = B[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1];",
"          B[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] = 0.2 * (A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2 - 1] + A[-2 * c0 + 3 * c1][1 + (-2 * c0 + 2 * c1 + c2)] + A[1 + (-2 * c0 + 3 * c1)][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1 - 1][-2 * c0 + 2 * c1 + c2]);",
"        }",
"        A[-2 * c0 + 3 * c1 + -1][498] = B[-2 * c0 + 3 * c1 + -1][498];",
"      }",
"      if (c0 >= 499) {",
"        if ((2 * c0 + 1) % 3 == 0) {",
"          for (c2 = ((2 * c0 + -992) * 3 < 0?-(-(2 * c0 + -992) / 3) : ((3 < 0?(-(2 * c0 + -992) + - 3 - 1) / - 3 : (2 * c0 + -992 + 3 - 1) / 3))); c2 <= (((2 * c0 + 499) * 3 < 0?((3 < 0?-((-(2 * c0 + 499) + 3 + 1) / 3) : -((-(2 * c0 + 499) + 3 - 1) / 3))) : (2 * c0 + 499) / 3)); c2++) {",
"            A[498][(-2 * c0 + 3 * c2 + 995) / 3] = B[498][(-2 * c0 + 3 * c2 + 995) / 3];",
"          }",
"        }",
"      }",
"    }"]
},
"parallel loop 7":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"kernel_jacobi_2d_imper",
"loop id":"3",
"loop line":"73",
"loop column":"11",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"            B[1][(-2 * c0 + 3 * c2 + 2) / 3] = 0.2 * (A[1][(-2 * c0 + 3 * c2 + 2) / 3] + A[1][(-2 * c0 + 3 * c2 + 2) / 3 - 1] + A[1][1 + (-2 * c0 + 3 * c2 + 2) / 3] + A[1 + 1][(-2 * c0 + 3 * c2 + 2) / 3] + A[1 - 1][(-2 * c0 + 3 * c2 + 2) / 3]);",
"          }"]
},
"parallel loop 8":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"kernel_jacobi_2d_imper",
"loop id":"4",
"loop line":"79",
"loop column":"7",
"pragma type":"parallel for",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":["c2"],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"        B[-2 * c0 + 3 * c1][1] = 0.2 * (A[-2 * c0 + 3 * c1][1] + A[-2 * c0 + 3 * c1][1 - 1] + A[-2 * c0 + 3 * c1][1 + 1] + A[1 + (-2 * c0 + 3 * c1)][1] + A[-2 * c0 + 3 * c1 - 1][1]);",
"        for (c2 = 2 * c0 + -2 * c1 + 2; c2 <= 2 * c0 + -2 * c1 + 498; c2++) {",
"          A[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1] = B[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1];",
"          B[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] = 0.2 * (A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2 - 1] + A[-2 * c0 + 3 * c1][1 + (-2 * c0 + 2 * c1 + c2)] + A[1 + (-2 * c0 + 3 * c1)][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1 - 1][-2 * c0 + 2 * c1 + c2]);",
"        }",
"        A[-2 * c0 + 3 * c1 + -1][498] = B[-2 * c0 + 3 * c1 + -1][498];",
"      }"]
},
"parallel loop 9":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"kernel_jacobi_2d_imper",
"loop id":"5",
"loop line":"81",
"loop column":"9",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"          A[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1] = B[-2 * c0 + 3 * c1 + -1][-2 * c0 + 2 * c1 + c2 + -1];",
"          B[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] = 0.2 * (A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1][-2 * c0 + 2 * c1 + c2 - 1] + A[-2 * c0 + 3 * c1][1 + (-2 * c0 + 2 * c1 + c2)] + A[1 + (-2 * c0 + 3 * c1)][-2 * c0 + 2 * c1 + c2] + A[-2 * c0 + 3 * c1 - 1][-2 * c0 + 2 * c1 + c2]);",
"        }"]
},
"parallel loop 10":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"kernel_jacobi_2d_imper",
"loop id":"6",
"loop line":"89",
"loop column":"11",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"            A[498][(-2 * c0 + 3 * c2 + 995) / 3] = B[498][(-2 * c0 + 3 * c2 + 995) / 3];",
"          }"]
},
"parallel loop 11":{
"file":"micro-benchmarks/DRB055-jacobi2d-parallel-no.c",
"function":"kernel_jacobi_2d_imper",
"loop id":"7",
"loop line":"95",
"loop column":"5",
"pragma type":"NULL",
"ordered":"false",
"offload":"false",
"multiversioned":"false",
"shared":[],
"private":[],
"firstprivate":[],
"lastprivate":[],
"linear":[],
"reduction":[],
"map to":[],
"map from":[],
"map tofrom":[],
"dependence list":[],
"body":["{",
"      A[498][c2 + -19] = B[498][c2 + -19];",
"    }"]
}
}